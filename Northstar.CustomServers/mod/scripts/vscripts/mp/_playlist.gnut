untyped
global function Playlist_Init
		
struct WeaponStruct {
	string name,
	bool   disabled,
	string	  mod1,
	string    mod2,
	array <string>   visor
} 

struct {
 array<WeaponStruct> weaponArray 

} file


void function Playlist_Init()
{
	// featured mode settings
	AddCallback_OnPlayerRespawned( FeaturedModeSettingsSetupPilotLoadouts )
	AddCallback_OnPilotBecomesTitan( FeaturedModeSettingsSetupTitanLoadouts )
	
	if ( IsFeaturedMode( "all_holopilot" ) || IsFeaturedMode( "all_grapple" ) || 
		 IsFeaturedMode( "all_phase" ) || IsFeaturedMode( "all_ticks" ) || 
		 IsFeaturedMode( "rocket_arena" ) || IsFeaturedMode( "shotguns_snipers" ) || 
		 IsFeaturedMode( "tactikill" ) || IsFeaturedMode( "amped_tacticals" ) )
		 SetLoadoutGracePeriodEnabled( false )
	
	// iron lts rules
	if ( HasIronRules() ) 
		Riff_ForceTitanExitEnabled( eTitanExitEnabled.Never )
	array<string> wNames

	//index 0-29 
	//index 0 - 22 primary
	//index 23 - 25 sec
	// index 26 - 29 at
	wNames.append("mp_weapon_rspn101")
	wNames.append("mp_weapon_rspn101_og")
	wNames.append("mp_weapon_hemlok")
	wNames.append("mp_weapon_g2")
	wNames.append("mp_weapon_vinson")
	wNames.append("mp_weapon_car")
	wNames.append("mp_weapon_alternator_smg")
	wNames.append("mp_weapon_hemlok_smg")
	wNames.append("mp_weapon_r97")
	wNames.append("mp_weapon_lmg")
	wNames.append("mp_weapon_lstar")
	wNames.append("mp_weapon_esaw")
	wNames.append("mp_weapon_sniper")
	wNames.append("mp_weapon_doubletake")
	wNames.append("mp_weapon_dmr")
	wNames.append("mp_weapon_shotgun")
	wNames.append("mp_weapon_mastiff")
	wNames.append("mp_weapon_smr")
	wNames.append("mp_weapon_epg")
	wNames.append("mp_weapon_softball")
	wNames.append("mp_weapon_pulse_lmg")
	wNames.append("mp_weapon_wingman_n")
	wNames.append("mp_weapon_shotgun_pistol")

	wNames.append("mp_weapon_autopistol")
	wNames.append("mp_weapon_semipistol")
	wNames.append("mp_weapon_wingman")

	wNames.append("mp_weapon_defender ")
	wNames.append("mp_weapon_mgl")
	wNames.append("mp_weapon_arc_launcher")
	wNames.append("mp_weapon_rocket_launcher")

	for(int i = 0; i < wNames.len(); i++ )
	{
	InitWeaponstruct()
	}

	// sync gun name array with WeaponStruct  
	for(int i = 0; i < wNames.len(); i++ )
	{
		file.weaponArray[i].name = wNames[i]
	}
}

bool function IsFeaturedMode( string modeName )
{
	return GetCurrentPlaylistVar( "featured_mode_" + modeName ) == "1"
}

void function FeaturedModeSettingsSetupPilotLoadouts( entity player )
{
	bool shouldChangeLoadout = false

	// create loadout struct
	PilotLoadoutDef modifiedLoadout = clone GetActivePilotLoadout( player )

	if ( IsFeaturedMode( "all_holopilot" ) )
	{
		shouldChangeLoadout = true 
		
		modifiedLoadout.special = "mp_ability_holopilot"
	}
		
	if ( IsFeaturedMode( "all_grapple" ) ) 
	{
		shouldChangeLoadout = true 
		
		modifiedLoadout.special = "mp_ability_grapple"
		modifiedLoadout.specialMods = [ "all_grapple" ]
	}
		
	if ( IsFeaturedMode( "all_phase" ) ) 
	{
		shouldChangeLoadout = true 
		
		modifiedLoadout.special = "mp_ability_shifter"
		modifiedLoadout.specialMods = [ "all_phase" ]
	}
		
	if ( IsFeaturedMode( "all_ticks" ) ) 
	{
		shouldChangeLoadout = true 
		
		modifiedLoadout.ordnance = "mp_weapon_frag_drone"
		modifiedLoadout.ordnanceMods = [ "all_ticks" ]
	}
	
	if ( IsFeaturedMode( "rocket_arena" ) )
	{	
		// this crashes sometimes for some reason
	
		shouldChangeLoadout = true
	
		// have to set attachments too, otherwise we could give invalid mods for this weapon
		modifiedLoadout.primary = "mp_weapon_epg"
		modifiedLoadout.primaryMods = [ "rocket_arena" ]
		modifiedLoadout.primaryAttachments = [ "" ]
		
		// set secondary to whatever one is pistol
		if ( GetWeaponInfoFileKeyField_Global( player.GetMainWeapons()[ 1 ].GetWeaponClassName(), "menu_category" ) == "at" )
		{
			modifiedLoadout.weapon3 = "mp_weapon_autopistol"
			modifiedLoadout.weapon3Mods = [ "rocket_arena" ]
		}
		else
		{
			modifiedLoadout.secondary = "mp_weapon_autopistol"
			modifiedLoadout.secondaryMods = [ "rocket_arena" ]
		}
		
		modifiedLoadout.meleeMods = [ "rocket_arena" ]
		
		player.GiveExtraWeaponMod( "rocket_arena" )
	}
	
	if ( IsFeaturedMode( "shotguns_snipers" ) )
	{
	
		shouldChangeLoadout = true 
		
		// this one was never released, assuming it just gives you a mastiff and a kraber with quick swap
		modifiedLoadout.primary = "mp_weapon_sniper"
		modifiedLoadout.primaryMods = [ "pas_fast_swap", "pas_fast_ads" ]
		modifiedLoadout.primaryAttachments = [ "" ]
		
		// set secondary to whatever one is pistol
		if ( GetWeaponInfoFileKeyField_Global( player.GetMainWeapons()[ 1 ].GetWeaponClassName(), "menu_category" ) == "at" )
		{
			modifiedLoadout.weapon3 = "mp_weapon_mastiff"
			modifiedLoadout.weapon3Mods = [ "pas_fast_swap", "pas_run_and_gun" ]
		}
		else
		{
			modifiedLoadout.secondary = "mp_weapon_mastiff"
			modifiedLoadout.secondaryMods = [ "pas_fast_swap", "pas_run_and_gun" ]
		}
	}

	if(IsFeaturedMode("BanLogicTest"))
	{
		shouldChangeLoadout = true 

		WeaponStruct weapon


		////////////////////////////////////////////////////////////////////////////////////// 
		///////////////////   Loops to ban weapon  DeV stuff
		//////////////////////////////////////////////////////////////////////////////////////
		for(int i = 0; i < 17; i++){
		file.weaponArray[i].disabled = true
		} 

		for(int i = 23; i < 24; i++){
		file.weaponArray[i].disabled = true
		} 

		for(int i = 26; i < 29; i++){
		file.weaponArray[i].disabled = true
		} 

		////////////////////////////////////////////////////////////////////////////////////// 
		///////////////////   Using Code 
		//////////////////////////////////////////////////////////////////////////////////////

		for(int CheckingWeapon = 0; CheckingWeapon < file.weaponArray.len(); CheckingWeapon++ )
		{

			WeaponStruct weapon = file.weaponArray[CheckingWeapon]

			//check Primary
			if(modifiedLoadout.primary == weapon.name && weapon.disabled)
			{
				printt("----------------------------------- changed prim")

				WeaponStruct newWeapon = GetFirstAvailablePrimaryWeapon(player)
				if (newWeapon.name != "Null" )
				{ 
					modifiedLoadout.primary = newWeapon.name
					// if mod1 is forced && mod 2 is free and its the same as forced mod1 we ignore it, but you can do it if  you want  tf2 wont crash
					if( newWeapon.mod1 != "UNDEFINED")
					{
						modifiedLoadout.primaryMods[0] = newWeapon.mod1
						modifiedLoadout.primaryAttachments = newWeapon.visor
					}

					if( newWeapon.mod2 != "UNDEFINED")
					{
						modifiedLoadout.primaryMods[1] = newWeapon.mod2
						modifiedLoadout.primaryAttachments = newWeapon.visor
					}	
				}
				else
				{
					var  message = "no Primary weapon found changing to Melee"
					SendHudMessage( player, message, -1, 0.4, 255, 0, 0, 0, 0, 3, 0.15 )
					player.TakeWeapon(modifiedLoadout.primary)
				}

			}
			//check Secondary Slot
			else if(modifiedLoadout.secondary == weapon.name && weapon.disabled)
			{
				printt("----------------------------------- changed SEC ")
				 WeaponStruct  newWeapon

				if ( GetWeaponInfoFileKeyField_Global( player.GetMainWeapons()[ 1 ].GetWeaponClassName(), "menu_category" ) == "at" )
				{
				   newWeapon = GetFirstAvailableAtWeapon(player)
				}
				else
				{
			       newWeapon = GetFirstAvailableSecWeapon(player)
				}
				
				if (newWeapon.name != "Null" )
				{ 
					modifiedLoadout.secondary = newWeapon.name
					// if mod1 is forced && mod 2 is free and its the same as forced mod1 we ignore it, but you can do it if  you want  tf2 wont crash
					if( weapon.mod1 != "UNDEFINED")
					{
						modifiedLoadout.secondaryMods[0] = newWeapon.mod1
					}

					if( weapon.mod2 != "UNDEFINED")
					{
						modifiedLoadout.secondaryMods[1] = newWeapon.mod2
					}	
				}
				else
				{
					var  message = "no Secondary weapon found changing to Melee"
					SendHudMessage( player, message, -1, 0.4, 255, 0, 0, 0, 0, 3, 0.15 )
					player.TakeWeapon(modifiedLoadout.secondary)
				}
			}
				//check 3rd Slot
			else if(modifiedLoadout.weapon3 == weapon.name && weapon.disabled)
			{
				printt("----------------------------------- changed weapon 3")
				WeaponStruct  newWeapon
 				if ( GetWeaponInfoFileKeyField_Global( player.GetMainWeapons()[ 2 ].GetWeaponClassName(), "menu_category" ) == "at" )
				{
				   newWeapon = GetFirstAvailableAtWeapon(player)
				}
				else
				{
			       newWeapon = GetFirstAvailableSecWeapon(player)
				}
				
				if (newWeapon.name != "Null" )
				{ 
					modifiedLoadout.weapon3 = newWeapon.name
					if( newWeapon.mod1 != "UNDEFINED")
					{
						modifiedLoadout.weapon3Mods[0] = newWeapon.mod1
					}

					if( newWeapon.mod2 != "UNDEFINED")
					{
						modifiedLoadout.weapon3Mods[1] = newWeapon.mod2
					}	
				}
				else
				{
					var  message = "no slot 3  weapon found changing to Melee"
					SendHudMessage( player, message, -1, 0.4, 255, 0, 0, 0, 0, 3, 0.15 )
					player.TakeWeapon(modifiedLoadout.weapon3)
				}
			}

		}

	}
	
	// dont wanna give a new loadout if it's not necessary, could break other callbacks
	if ( shouldChangeLoadout )
		GivePilotLoadout( player, modifiedLoadout )

	if ( IsFeaturedMode( "tactikill" ) )
		player.GiveExtraWeaponMod( "tactical_cdr_on_kill" )
	
	if ( IsFeaturedMode( "amped_tacticals" ) )
		player.GiveExtraWeaponMod( "amped_tacticals" )
}


void function FeaturedModeSettingsSetupTitanLoadouts( entity player, entity titan )
{
	if ( IsFeaturedMode( "turbo_titans" ) )
	{
		array<string> settingsMods = player.GetPlayerSettingsMods()
		
		// seems to crash if we set both of these at once? idk odd game
		if ( !settingsMods.contains( "pas_mobility_dash_capacity" ) )
		{
			settingsMods.append( "turbo_titan" )
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), settingsMods )
		}
	}
}




WeaponStruct function GetFirstAvailablePrimaryWeapon(entity player)
{
	WeaponStruct newWeapon

	for(int i = 0; i < 23; i++ )
	{
		WeaponStruct CurrentCheckingWeapon  =	file.weaponArray[i]
		
		if(CurrentCheckingWeapon.disabled == false)
		{
			var message = " Used Banned weapon changed to weapon index " + i +" " + CurrentCheckingWeapon.name
			SendHudMessage( player, message, -1, 0.4, 255, 0, 0, 0, 0, 3, 0.15 )
			newWeapon = CurrentCheckingWeapon
			return newWeapon
		}
	}
	WeaponStruct nullWeaponStruct  = {name = "Null", disabled = false ,mod1 = "UNDEFINED" , mod2 = "UNDEFINED" , visor = [] } 
	return nullWeaponStruct
}


WeaponStruct function GetFirstAvailableSecWeapon(entity player)
{
	WeaponStruct newWeapon
 for(int i = 23; i < 26; i++ )
	{
		WeaponStruct CurrentCheckingWeapon  =	file.weaponArray[i]
		
		if(CurrentCheckingWeapon.disabled == false)
		{
			var message = " Used Banned weapon changed to weapon index " + i +" " + CurrentCheckingWeapon.name
			SendHudMessage( player, message, -1, 0.4, 255, 0, 0, 0, 0, 3, 0.15 )
			newWeapon = CurrentCheckingWeapon
			return newWeapon
		}
	}
	WeaponStruct nullWeaponStruct  = {name = "Null", disabled = false ,mod1 = "UNDEFINED" , mod2 = "UNDEFINED" , visor = [] } 
	return nullWeaponStruct
}

WeaponStruct function GetFirstAvailableAtWeapon(entity player)
{
	WeaponStruct newWeapon
 for(int i = 27; i < 30; i++ )
	{
		WeaponStruct CurrentCheckingWeapon  =	file.weaponArray[i]
		
		if(CurrentCheckingWeapon.disabled == false)
		{
			var message = " Used Banned weapon changed to weapon index " + i +" " + CurrentCheckingWeapon.name
			SendHudMessage( player, message, -1, 0.4, 255, 0, 0, 0, 0, 3, 0.15 )
			newWeapon = CurrentCheckingWeapon
			return newWeapon
		}
	}
	WeaponStruct nullWeaponStruct  = {name = "Null", disabled = false ,mod1 = "UNDEFINED" , mod2 = "UNDEFINED" , visor = [] } 
	return nullWeaponStruct
}

void function InitWeaponstruct()
{
	WeaponStruct newWeaponStruct  = {name ="" , disabled = false ,mod1 = "UNDEFINED" , mod2 = "UNDEFINED" , visor = [] }  
	file.weaponArray.append(newWeaponStruct)
}
